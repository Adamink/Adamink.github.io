<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>马兰花开</title>
      <link href="/2018/10/04/%E9%A9%AC%E5%85%B0%E8%8A%B1%E5%BC%80/"/>
      <url>/2018/10/04/%E9%A9%AC%E5%85%B0%E8%8A%B1%E5%BC%80/</url>
      <content type="html"><![CDATA[<p>思念是温柔的笑意<br>分离是荒芜的诗<br>苟且又想起<br>回忆是去年的毛衣<br>被丢在角落的信<br>想起来又忘记  </p><p>那晚是闷热的天气<br>姑娘枕着我的心<br>安静又欢喜<br>今夜是笨拙的练习<br>我慢慢等着烟熄<br>我在想念你</p><p>总有人用离开证明他们存在的意义<br>可是为什么会等到　每次都不懂得珍惜<br>明明想要克制却再一次地不能自已<br>是不是那晚的月亮太美　让我动了心</p><p>小皮球　香蕉梨<br>马兰开花　二十一<br>二四二五六　二四二五七<br>马兰开花　二十余一</p>]]></content>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SVD实现-穹妹的奇异值分解</title>
      <link href="/2018/08/14/SVD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/14/SVD%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>The first image is the input image, and next 4 is processed image, corresponding to using 1,2,4 and 16 singular values.</p><p>The 16 singular value is much more better than 1,2,4 cases and show most of features of the initial image.</p><p>The code is given in image_reconstruction.py.</p><a id="more"></a><p>Code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">in_image = cv2.imread(<span class="string">"input.jpeg"</span>).astype(np.float64)</span><br><span class="line">n, d = in_image.shape[:<span class="number">2</span>]</span><br><span class="line">rk_pool = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">16</span>]</span><br><span class="line"><span class="keyword">for</span> rk <span class="keyword">in</span> rk_pool:</span><br><span class="line">    b, g, r = cv2.split(in_image)</span><br><span class="line">    image_pool = [b,g,r]</span><br><span class="line">    out_image = np.zeros((n, d, <span class="number">3</span>))</span><br><span class="line">    frob_percent = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        u, s, vh = np.linalg.svd(image_pool[channel], full_matrices=<span class="keyword">False</span>)</span><br><span class="line">        init_frob = np.sqrt(np.sum(s**<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rk,d):</span><br><span class="line">            s[i] = <span class="number">0.0</span></span><br><span class="line">        processed_frob = np.sqrt(np.sum(s**<span class="number">2</span>))</span><br><span class="line">        frob_percent = frob_percent + processed_frob / init_frob</span><br><span class="line">        s = np.diag(s)</span><br><span class="line">        out = np.matmul(u,np.matmul(s,vh))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(d):</span><br><span class="line">                <span class="keyword">if</span> out[row,col] &lt; <span class="number">255.0</span> <span class="keyword">and</span> out[row, col] &gt;=<span class="number">0.0</span>:</span><br><span class="line">                    out_image[row, col, channel] = out[row, col]</span><br><span class="line">                <span class="keyword">elif</span> out[row, col] &gt;=<span class="number">255.0</span>:</span><br><span class="line">                    out_image[row, col, channel] = <span class="number">255.0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out_image[row, col, channel] = <span class="number">0.0</span></span><br><span class="line">    cv2.imwrite(<span class="string">"output_rank_"</span> + str(rk) + <span class="string">".jpg"</span>, out_image.astype(np.uint8))</span><br><span class="line">    frob_percent /= <span class="number">3.0</span></span><br><span class="line">    print(<span class="string">"Using %d singular values, %.1lf%% of the Frobenius norm."</span> % (rk, frob_percent * <span class="number">100</span>))</span><br></pre></td></tr></table></figure></p><ol start="2"><li>Running the code and the Frobenius norm captured in each case is 97.15, 98.0%, 98.9%, 99.7%, corresonding to using 1,2,4 and 16 singular values.</li></ol><p><img src="/images/input.jpeg" alt="Input"><br><img src="/images/output_rank_1.jpg" alt=""><br><img src="/images/output_rank_2.jpg" alt=""><br><img src="/images/output_rank_4.jpg" alt=""><br><img src="/images/output_rank_16.jpg" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Trie树, 后缀数组模板</title>
      <link href="/2018/08/14/Trie%E6%A0%91-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/08/14/Trie%E6%A0%91-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALPHABET_SIZE 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">trie_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> count;   <span class="comment">// 记录该节点代表的单词的个数</span></span><br><span class="line">    trie_node *children[ALPHABET_SIZE]; <span class="comment">// 各个子节点 </span></span><br><span class="line">&#125;*trie;</span><br><span class="line"></span><br><span class="line"><span class="function">trie_node* <span class="title">create_trie_node</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* pNode = <span class="keyword">new</span> trie_node();</span><br><span class="line">    pNode-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ALPHABET_SIZE; ++i)</span><br><span class="line">        pNode-&gt;children[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> pNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trie_insert</span><span class="params">(trie root, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* node = root;</span><br><span class="line">    <span class="keyword">char</span>* p = key;</span><br><span class="line">    <span class="keyword">while</span>(*p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;children[*p-<span class="string">'a'</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node-&gt;children[*p-<span class="string">'a'</span>] = create_trie_node();</span><br><span class="line">        &#125;</span><br><span class="line">        node = node-&gt;children[*p-<span class="string">'a'</span>];</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询：不存在返回0，存在返回出现的次数</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trie_search</span><span class="params">(trie root, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* node = root;</span><br><span class="line">    <span class="keyword">char</span>* p = key;</span><br><span class="line">    <span class="keyword">while</span>(*p &amp;&amp; node!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node = node-&gt;children[*p-<span class="string">'a'</span>];</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> node-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 关键字集合</span></span><br><span class="line">    <span class="keyword">char</span> keys[][<span class="number">8</span>] = &#123;<span class="string">"the"</span>, <span class="string">"a"</span>, <span class="string">"there"</span>, <span class="string">"answer"</span>, <span class="string">"any"</span>, <span class="string">"by"</span>, <span class="string">"bye"</span>, <span class="string">"their"</span>&#125;;</span><br><span class="line">    trie root = create_trie_node();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建trie树</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        trie_insert(root, keys[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检索字符串</span></span><br><span class="line">    <span class="keyword">char</span> s[][<span class="number">32</span>] = &#123;<span class="string">"Present in trie"</span>, <span class="string">"Not present in trie"</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"the"</span>, trie_search(root, <span class="string">"the"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"these"</span>, trie_search(root, <span class="string">"these"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"their"</span>, trie_search(root, <span class="string">"their"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"thaw"</span>, trie_search(root, <span class="string">"thaw"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">8</span>, M = <span class="number">1e6</span> + <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], K, ans, q[N];</span><br><span class="line"><span class="keyword">int</span> cnt[M], t1[N], t2[N], sa[N], ht[N], rk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) m = max(m, s[i]), cnt[t1[i] = s[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sa[cnt[t1[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; i++) t2[++p] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (sa[i] &gt; k) t2[++p] = sa[i] - k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) cnt[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[t1[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) sa[cnt[t1[t2[i]]]--] = t2[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) swap(t1[i], t2[i]);</span><br><span class="line">p = <span class="number">0</span>; t1[sa[<span class="number">1</span>]] = ++p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">t1[sa[i]] = (t2[sa[i]] == t2[sa[i - <span class="number">1</span>]] &amp;&amp; </span><br><span class="line">t2[sa[i] + k] == t2[sa[i - <span class="number">1</span>] + k]) ? p : ++p;</span><br><span class="line">m = p; <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, h = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>) h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (h) h--;</span><br><span class="line"><span class="keyword">while</span> (i + h &lt;= n &amp;&amp; sa[rk[i] - <span class="number">1</span>] + h &lt;= n </span><br><span class="line">&amp;&amp; s[i + h] == s[sa[rk[i] - <span class="number">1</span>] + h]) h++;</span><br><span class="line">&#125;</span><br><span class="line">ht[rk[i]] = h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - K + <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (l &gt; r || q[r] &lt; i + K - <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = q[r] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; ht[p] &lt; ht[q[r]]) r--;</span><br><span class="line">q[++r] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; q[l] &lt; i) l++;</span><br><span class="line">ans = max(ans, ht[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">build_sa(n, a);</span><br><span class="line">solve();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">fclose(<span class="built_in">stdin</span>); fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Prim, Kruskal, Dijkstra, Hungarian Algorithm Templates</title>
      <link href="/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/"/>
      <url>/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/</url>
      <content type="html"><![CDATA[<h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><ul><li>时间复杂度 O(V^2)<a id="more"></a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> graph[][MAX], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> lowcost[MAX];  </span><br><span class="line">    <span class="keyword">int</span> mst[MAX];  </span><br><span class="line">    <span class="keyword">int</span> i, j, min, minid, sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        lowcost[i] = graph[<span class="number">1</span>][i];  </span><br><span class="line">        mst[i] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    mst[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        min = MAXCOST;  </span><br><span class="line">        minid = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] &lt; min &amp;&amp; lowcost[j] != <span class="number">0</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                min = lowcost[j];  </span><br><span class="line">                minid = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"V"</span> &lt;&lt; mst[minid] &lt;&lt; <span class="string">"-V"</span> &lt;&lt; minid &lt;&lt; <span class="string">"="</span> &lt;&lt; min &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        sum += min;  </span><br><span class="line">        lowcost[minid] = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (graph[minid][j] &lt; lowcost[j])  </span><br><span class="line">            &#123;  </span><br><span class="line">                lowcost[j] = graph[minid][j];  </span><br><span class="line">                mst[j] = minid;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><ul><li>时间复杂度 O(ElogE)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> nEdge = <span class="number">0</span>, res = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//将边按照权值从小到大排序  </span></span><br><span class="line">    qsort(a, n, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), cmp);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; nEdge != m - <span class="number">1</span>; i++)&#123;  </span><br><span class="line">        <span class="comment">//判断当前这条边的两个端点是否属于同一棵树  </span></span><br><span class="line">        <span class="keyword">if</span>(find(a[i].a) != find(a[i].b))&#123;  </span><br><span class="line">            unite(a[i].a, a[i].b);  </span><br><span class="line">            res += a[i].price;  </span><br><span class="line">            nEdge++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//如果加入边的数量小于m - 1,则表明该无向图不连通,等价于不存在最小生成树  </span></span><br><span class="line">    <span class="keyword">if</span>(nEdge &lt; m<span class="number">-1</span>) res = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="keyword">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="keyword">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="keyword">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="keyword">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化v[0]到v[i]的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dis[i] = w[<span class="number">0</span>][i];                                       </span><br><span class="line">    vis[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//标记v[0]点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查找最近点</span></span><br><span class="line">        <span class="keyword">int</span> min = INF,k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[w] &amp;&amp; dis[j] &lt; min)</span><br><span class="line">                min = dis[w],k = j;</span><br><span class="line">        vis[k] = <span class="number">1</span>;<span class="comment">//标记查找到的最近点</span></span><br><span class="line">        <span class="comment">//判断是直接v[0]连接v[j]短，还是经过v[k]连接v[j]更短</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; min+w[k][j] &lt; dis[j])</span><br><span class="line">                d[j] = min+w[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF  0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> wt;</span><br><span class="line">edge(<span class="keyword">int</span> to_,<span class="keyword">int</span> wt_):to(to_),wt(wt_)&#123;&#125;;</span><br><span class="line"><span class="comment">/*bool operator&lt; (edge&amp; b)&#123;</span></span><br><span class="line"><span class="comment">return val&lt;b.val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">edge()&#123;&#125;;</span></span><br><span class="line"><span class="comment">edge(int from_,int to_,int val_):from(from_),to(to_),val(val_)&#123;&#125;;*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node&amp; b)&#123;</span><br><span class="line"><span class="keyword">return</span> val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">node(<span class="keyword">int</span> to_,<span class="keyword">int</span> val_):to(to_),val(val_)&#123;&#125;;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; adj[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;edge&gt;::iterator it;</span><br><span class="line">priority_queue&lt;node, <span class="built_in">vector</span>&lt;node&gt;,less&lt;node&gt; &gt; heap;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> prev[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> wt)</span></span>&#123;</span><br><span class="line">adj[from].push_back(edge(to,wt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dis[i]=INF;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dis[from]=<span class="number">0</span>;</span><br><span class="line">heap.push(node(from,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">node now;</span><br><span class="line"><span class="keyword">while</span>(vis[(now=heap.top()).to])</span><br><span class="line">heap.pop();</span><br><span class="line">heap.pop();</span><br><span class="line">vis[now.to]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(it i=adj[now.to].begin();i!=adj[now.to].end();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[now.to]+i-&gt;wt&lt;dis[i-&gt;to])&#123;</span><br><span class="line">dis[i-&gt;to]=dis[now.to]+i-&gt;wt;</span><br><span class="line">heap.push(node(i-&gt;to,dis[i-&gt;to]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> from,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> from,to,wt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from&gt;&gt;to&gt;&gt;wt;</span><br><span class="line">add(from,to,wt);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(from,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Hungarian"><a href="#Hungarian" class="headerlink" title="Hungarian"></a>Hungarian</h1><p><code>`</code>cpp<br>//poj_2446<br>/<em>==================================================</em>\<br>| 二分图匹配（匈牙利算法DFS 实现）<br>| INIT: g[][]邻接矩阵;<br>| 优点：实现简洁容易理解，适用于稠密图，DFS找增广路快。<br>| 找一条增广路的复杂度为O（E），最多找V条增广路，故时间复杂度为O（VE）<br>==================================================*/  </p><p>#include&lt;stdio.h&gt;  </p><p>#include&lt;memory.h&gt;  </p><p>#define MAX 1089 //33*33<br>bool g[MAX][MAX]; //邻接矩阵，true代表有边相连<br>bool flag,visit[MAX];    //记录V2中的某个点是否被搜索过<br>int match[MAX];   //记录与V2中的点匹配的点的编号<br>int cnt;   //二分图中左边、右边集合中顶点的数目<br>bool hole[MAX][MAX];<br>int id[MAX][MAX];  </p><p>// 匈牙利算法<br>bool dfs(int u)<br>{<br>    for (int i = 1; i &lt;= cnt; ++i)<br>    {<br>        if (g[u][i] &amp;&amp; !visit[i])   //如果节点i与u相邻并且未被查找过<br>        {<br>            visit[i] = true;   //标记i为已查找过<br>            if (match[i] == -1 || dfs(match[i]))   //如果i未在前一个匹配M中，或者i在匹配M中，但是从与i相邻的节点出发可以有增广路径<br>            {<br>                match[i] = u;  //记录查找成功记录，更新匹配M（即“取反”）<br>                return true;   //返回查找成功<br>            }<br>        }<br>    }<br>    return false;<br>}<br>int MaxMatch()<br>{<br>    int i,sum=0;<br>    memset(match,-1,sizeof(match));<br>    for(i = 1 ; i &lt;= cnt ; ++i)<br>    {<br>        memset(visit,false,sizeof(visit));   //清空上次搜索时的标记<br>        if( dfs(i) )    //从节点i尝试扩展<br>        {<br>            sum++;<br>        }<br>    }<br>    return sum;<br>}  </p><p>int main(void)<br>{<br>    int i,j,k,m,n,ans,y,x;<br>    while (scanf(“%d %d %d”,&amp;m,&amp;n,&amp;k)!=EOF)<br>    {<br>          memset(g,false,sizeof(g));<br>          memset(hole,false,sizeof(hole));<br>          for (i = 1; i &lt;= k; ++i)<br>          {<br>              scanf(“%d %d”,&amp;y,&amp;x);<br>              hole[x][y] = true;<br>          }<br>          if((m*n-k)&amp;1)   //奇偶剪枝<br>          {<br>              puts(“NO”);<br>              continue;<br>          }<br>          cnt = 0;  </p><pre><code>      for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)   //对没有涂黑的点进行标号                {                    id[i][j] = ++cnt;                }            }        }        for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)                {                    if(i-1&gt;0 &amp;&amp; hole[i-1][j] == false)   //建图。。要注意边界问题                        g[ id[i][j] ][ id[i-1][j] ] = true;                    if(i+1&lt;=m &amp;&amp; hole[i+1][j] == false)                        g[ id[i][j] ][ id[i+1][j] ] = true;                    if(j-1&gt;0 &amp;&amp; hole[i][j-1] == false)                        g[ id[i][j] ][ id[i][j-1] ] = true;                    if(j+1&lt;=n &amp;&amp; hole[i][j+1] == false)                        g[ id[i][j] ][ id[i][j+1] ] = true;                }            }        }        ans = MaxMatch();        if (ans == cnt)            puts(&quot;YES&quot;);        else            puts(&quot;NO&quot;);  }  return 0;  </code></pre><p>}  </p>]]></content>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>夜思</title>
      <link href="/2018/08/14/%E5%A4%9C%E6%80%9D/"/>
      <url>/2018/08/14/%E5%A4%9C%E6%80%9D/</url>
      <content type="html"><![CDATA[<p>忽然间，我失去多少落日<br>那些高尚的人们是否知道，<br>他们正盗用生存的名义，<br>布施致命的罗网  </p><p>我曾阅读每束光线里的诗行，<br>我曾在每个夜晚远行到梦的疆界，<br>无论转过多少疯狂的街角，<br>都能轻而易举地蔑视死亡。<br>我拥有乐观的贫穷和狂热的爱意，<br>直到出卖了年华，敌视着远方。<br>土壤，土壤，<br>我们生活的地方，<br>我们荒诞的战场！  </p><p>如今我已两手空空，<br>每当夜幕降临我虚构睡意<br>黑暗沉默不语，在每一盏夜灯下<br>收发属于每一个人的种子<br>夜风酝酿了意志，吹入草场<br>也许有一天<br>我将目击千万次的黎明的光</p>]]></content>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>华丽的诗</title>
      <link href="/2018/08/14/%E5%8D%8E%E4%B8%BD%E7%9A%84%E8%AF%97/"/>
      <url>/2018/08/14/%E5%8D%8E%E4%B8%BD%E7%9A%84%E8%AF%97/</url>
      <content type="html"><![CDATA[<p>树，在消失的岛屿上<br>与另一个素未谋面的同类重逢<br>信天翁冲入没有鱼儿的水底<br>闪电，言和于温柔的夜色<br>像所有被收回的露珠与眼神<br>广袤的水面将自己忘记  </p><p>梦境学会敲打<br>一再惊醒故事结局的亡魂<br>彼时，街道瘦落，长夜<br>听到虫鸣寂寂<br>每一片叶的脉络<br>开始被大理石碑轻柔地拭去  </p><p>但是，<br>正因着忧伤是复活的种子<br>我听见飞鸟衔来过去的石头<br>我听见松茸，在每一寸记忆<br>土壤里展开自己<br>你的灵魂是风<br>从一无所有里渐渐扬起<br>如同没有一次夜幕<br>能够阻挡太阳的旅行  </p><p>看吧<br>狂野的森林<br>正在岁月里拔地而起<br>我把世上所有的海浪<br>卷成蓝色的玫瑰<br>只为祝福你的生命</p>]]></content>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>城门开</title>
      <link href="/2018/08/14/%E5%9F%8E%E9%97%A8%E5%BC%80/"/>
      <url>/2018/08/14/%E5%9F%8E%E9%97%A8%E5%BC%80/</url>
      <content type="html"><![CDATA[<p>在彩色的冰面上裸足祈祷<br>风中，旧衣裳选择沉默<br>苍老的手松开：<br>诀别、生计、太阳</p><p>无从抵御的针尖下，<br>暮色迟迟，轰然作响<br>死去的人不在彼岸<br>他们化身万物 流回山谷海洋  </p><p>大风曾带走梦的潮声<br>往四面八方的街道飘荡<br>年岁灰黄，不停的脚步<br>走着沉睡的人们<br>肮脏的城市上空<br>白雪茫茫</p><p>合眼<br>最后的和弦锤落在地<br>往事四溅<br>飞驰而过胶片般的人<br>所有的大海为你闭合<br>而喧嚣中，<br>你看到静静升起的太阳</p>]]></content>
      
      
        <tags>
            
            <tag> poem </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
