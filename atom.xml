<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴箫的小站</title>
  
  <subtitle>代码，生活与诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T13:32:05.550Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴箫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Prim, Kruskal, Dijkstra, Hungarian Algorithm Templates</title>
    <link href="http://yoursite.com/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/"/>
    <id>http://yoursite.com/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/</id>
    <published>2018-08-14T17:46:44.000Z</published>
    <updated>2018-08-14T13:32:05.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><ul><li>时间复杂度 O(V^2)<a id="more"></a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> graph[][MAX], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> lowcost[MAX];  </span><br><span class="line">    <span class="keyword">int</span> mst[MAX];  </span><br><span class="line">    <span class="keyword">int</span> i, j, min, minid, sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        lowcost[i] = graph[<span class="number">1</span>][i];  </span><br><span class="line">        mst[i] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    mst[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        min = MAXCOST;  </span><br><span class="line">        minid = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] &lt; min &amp;&amp; lowcost[j] != <span class="number">0</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                min = lowcost[j];  </span><br><span class="line">                minid = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"V"</span> &lt;&lt; mst[minid] &lt;&lt; <span class="string">"-V"</span> &lt;&lt; minid &lt;&lt; <span class="string">"="</span> &lt;&lt; min &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        sum += min;  </span><br><span class="line">        lowcost[minid] = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (graph[minid][j] &lt; lowcost[j])  </span><br><span class="line">            &#123;  </span><br><span class="line">                lowcost[j] = graph[minid][j];  </span><br><span class="line">                mst[j] = minid;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><ul><li>时间复杂度 O(ElogE)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> nEdge = <span class="number">0</span>, res = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//将边按照权值从小到大排序  </span></span><br><span class="line">    qsort(a, n, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), cmp);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; nEdge != m - <span class="number">1</span>; i++)&#123;  </span><br><span class="line">        <span class="comment">//判断当前这条边的两个端点是否属于同一棵树  </span></span><br><span class="line">        <span class="keyword">if</span>(find(a[i].a) != find(a[i].b))&#123;  </span><br><span class="line">            unite(a[i].a, a[i].b);  </span><br><span class="line">            res += a[i].price;  </span><br><span class="line">            nEdge++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//如果加入边的数量小于m - 1,则表明该无向图不连通,等价于不存在最小生成树  </span></span><br><span class="line">    <span class="keyword">if</span>(nEdge &lt; m<span class="number">-1</span>) res = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="keyword">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="keyword">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="keyword">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="keyword">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化v[0]到v[i]的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dis[i] = w[<span class="number">0</span>][i];                                       </span><br><span class="line">    vis[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//标记v[0]点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查找最近点</span></span><br><span class="line">        <span class="keyword">int</span> min = INF,k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[w] &amp;&amp; dis[j] &lt; min)</span><br><span class="line">                min = dis[w],k = j;</span><br><span class="line">        vis[k] = <span class="number">1</span>;<span class="comment">//标记查找到的最近点</span></span><br><span class="line">        <span class="comment">//判断是直接v[0]连接v[j]短，还是经过v[k]连接v[j]更短</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; min+w[k][j] &lt; dis[j])</span><br><span class="line">                d[j] = min+w[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF  0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> wt;</span><br><span class="line">edge(<span class="keyword">int</span> to_,<span class="keyword">int</span> wt_):to(to_),wt(wt_)&#123;&#125;;</span><br><span class="line"><span class="comment">/*bool operator&lt; (edge&amp; b)&#123;</span></span><br><span class="line"><span class="comment">return val&lt;b.val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">edge()&#123;&#125;;</span></span><br><span class="line"><span class="comment">edge(int from_,int to_,int val_):from(from_),to(to_),val(val_)&#123;&#125;;*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node&amp; b)&#123;</span><br><span class="line"><span class="keyword">return</span> val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">node(<span class="keyword">int</span> to_,<span class="keyword">int</span> val_):to(to_),val(val_)&#123;&#125;;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; adj[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;edge&gt;::iterator it;</span><br><span class="line">priority_queue&lt;node, <span class="built_in">vector</span>&lt;node&gt;,less&lt;node&gt; &gt; heap;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> prev[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> wt)</span></span>&#123;</span><br><span class="line">adj[from].push_back(edge(to,wt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dis[i]=INF;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dis[from]=<span class="number">0</span>;</span><br><span class="line">heap.push(node(from,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">node now;</span><br><span class="line"><span class="keyword">while</span>(vis[(now=heap.top()).to])</span><br><span class="line">heap.pop();</span><br><span class="line">heap.pop();</span><br><span class="line">vis[now.to]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(it i=adj[now.to].begin();i!=adj[now.to].end();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[now.to]+i-&gt;wt&lt;dis[i-&gt;to])&#123;</span><br><span class="line">dis[i-&gt;to]=dis[now.to]+i-&gt;wt;</span><br><span class="line">heap.push(node(i-&gt;to,dis[i-&gt;to]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> from,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> from,to,wt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from&gt;&gt;to&gt;&gt;wt;</span><br><span class="line">add(from,to,wt);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(from,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Hungarian"><a href="#Hungarian" class="headerlink" title="Hungarian"></a>Hungarian</h1><p><code>`</code>cpp<br>//poj_2446<br>/<em>==================================================</em>\<br>| 二分图匹配（匈牙利算法DFS 实现）<br>| INIT: g[][]邻接矩阵;<br>| 优点：实现简洁容易理解，适用于稠密图，DFS找增广路快。<br>| 找一条增广路的复杂度为O（E），最多找V条增广路，故时间复杂度为O（VE）<br>==================================================*/  </p><p>#include&lt;stdio.h&gt;  </p><p>#include&lt;memory.h&gt;  </p><p>#define MAX 1089 //33*33<br>bool g[MAX][MAX]; //邻接矩阵，true代表有边相连<br>bool flag,visit[MAX];    //记录V2中的某个点是否被搜索过<br>int match[MAX];   //记录与V2中的点匹配的点的编号<br>int cnt;   //二分图中左边、右边集合中顶点的数目<br>bool hole[MAX][MAX];<br>int id[MAX][MAX];  </p><p>// 匈牙利算法<br>bool dfs(int u)<br>{<br>    for (int i = 1; i &lt;= cnt; ++i)<br>    {<br>        if (g[u][i] &amp;&amp; !visit[i])   //如果节点i与u相邻并且未被查找过<br>        {<br>            visit[i] = true;   //标记i为已查找过<br>            if (match[i] == -1 || dfs(match[i]))   //如果i未在前一个匹配M中，或者i在匹配M中，但是从与i相邻的节点出发可以有增广路径<br>            {<br>                match[i] = u;  //记录查找成功记录，更新匹配M（即“取反”）<br>                return true;   //返回查找成功<br>            }<br>        }<br>    }<br>    return false;<br>}<br>int MaxMatch()<br>{<br>    int i,sum=0;<br>    memset(match,-1,sizeof(match));<br>    for(i = 1 ; i &lt;= cnt ; ++i)<br>    {<br>        memset(visit,false,sizeof(visit));   //清空上次搜索时的标记<br>        if( dfs(i) )    //从节点i尝试扩展<br>        {<br>            sum++;<br>        }<br>    }<br>    return sum;<br>}  </p><p>int main(void)<br>{<br>    int i,j,k,m,n,ans,y,x;<br>    while (scanf(“%d %d %d”,&amp;m,&amp;n,&amp;k)!=EOF)<br>    {<br>          memset(g,false,sizeof(g));<br>          memset(hole,false,sizeof(hole));<br>          for (i = 1; i &lt;= k; ++i)<br>          {<br>              scanf(“%d %d”,&amp;y,&amp;x);<br>              hole[x][y] = true;<br>          }<br>          if((m*n-k)&amp;1)   //奇偶剪枝<br>          {<br>              puts(“NO”);<br>              continue;<br>          }<br>          cnt = 0;  </p><pre><code>      for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)   //对没有涂黑的点进行标号                {                    id[i][j] = ++cnt;                }            }        }        for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)                {                    if(i-1&gt;0 &amp;&amp; hole[i-1][j] == false)   //建图。。要注意边界问题                        g[ id[i][j] ][ id[i-1][j] ] = true;                    if(i+1&lt;=m &amp;&amp; hole[i+1][j] == false)                        g[ id[i][j] ][ id[i+1][j] ] = true;                    if(j-1&gt;0 &amp;&amp; hole[i][j-1] == false)                        g[ id[i][j] ][ id[i][j-1] ] = true;                    if(j+1&lt;=n &amp;&amp; hole[i][j+1] == false)                        g[ id[i][j] ][ id[i][j+1] ] = true;                }            }        }        ans = MaxMatch();        if (ans == cnt)            puts(&quot;YES&quot;);        else            puts(&quot;NO&quot;);  }  return 0;  </code></pre><p>}  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prim&quot;&gt;&lt;a href=&quot;#Prim&quot; class=&quot;headerlink&quot; title=&quot;Prim&quot;&gt;&lt;/a&gt;Prim&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度 O(V^2)
    
    </summary>
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
  </entry>
  
</feed>
