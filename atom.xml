<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴箫的小站</title>
  
  <subtitle>代码，生活与诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-27T04:29:46.738Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴箫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>入学季</title>
    <link href="http://yoursite.com/2019/08/23/%E5%85%A5%E5%AD%A6%E5%AD%A3/"/>
    <id>http://yoursite.com/2019/08/23/入学季/</id>
    <published>2019-08-24T03:01:37.780Z</published>
    <updated>2019-08-27T04:29:46.738Z</updated>
    
    <content type="html"><![CDATA[<p>写给妹妹</p><h2 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h2><p>我把本科看作职业生涯的起点，并认为一段成功的职业生涯的关键是放松的心态。没有什么路线是非遵守不可的，也不是非得要达到现在所设想的某一个目标；拘泥于某个目标反而会错过体验。在本科四年快要结束的时候回看，我遗憾的是很多事没有去做，而不是做了什么。是没有更多且更深入地与人交往，没有更早或更频繁地健身，是没有更专注于我一直想做的事情，是怀着不太高的热情去做那些被认为是应该要做的事。</p><p>但另一方面，时间会在一个更大的尺度上呈现出颠覆的能力。失去的时间会以知识、记忆、被塑造的自我附着在自己身上，一以贯之的热情、深入的好奇心能让一个本科生在某一个领域达到卓越的程度。</p><p>从一个研究生导师的眼里看，一个较好的保研学生的背景是，有较高的GPA(3.7)，有和老师合作发表论文的经历。从一个HR的角度看，实习经历显然更为重要。对于出国党来说，托福/GRE是不得不花时间和精力刷高的。这些是值得作为目标追求的，完成这些，可以让自己觉得没有虚度本科四年。</p><p>但从更大的尺度看，这些目标只是下一场游戏的入场券，而在追逐这些目标的过程中自我的改变，会决定所行进的方向。</p><h3 id="GPA"><a href="#GPA" class="headerlink" title="GPA"></a>GPA</h3><p>GPA主要的用处是</p><p>绩点主要的用处是</p><ol><li>保研的院排名根据GPA和其它一些保研加分项（国家级获奖/重要的学生会任职等）综合计算</li><li>出国申请时学校教务会开具成绩单，展示GPA和院排名</li><li>奖学金</li><li>申请实习/找工作时自己简历上展现GPA和排名</li></ol><p>川大每门课绩点的计算方法如下：</p><p><img src="../images/gpa.png" alt="image-20190826210213029"></p><p>这个表有一点要注意的，就是优秀(85)以上给分比较好，而84只有3.3。GPA是每门课的绩点在学分上加权平均，维持高绩点的方式就是不能有分数特别低的课。在这种设定下，尽量每门都在85上。有一门六七十的话绩点就爆炸了，所以刷绩点的话一定要均衡一点。然后上90可以满绩也是一个利好，这意味着只要有心可以把绩点刷很高。</p><p>还有一个要注意的：申请出国绝对绩点比较重要，排名不那么重要，比如3.8+可以申请到很好的学校；而保研只看院排名。</p><p>我个人关于GPA的一个重要领悟是，GPA的作用只是这四年间的，是一个阶段性的东西。如果目的只是保研的话，过线即可，不必太过苛求；还有其它很多方面的探索值得去做，不要为了成绩束手束脚。譬如，理工科院系的同学很多会进入学校的实验室或工业界实习，商科/法律的同学会去公司/律所实习，学文科/语言的同学可能去交换，这些对刷高GPA没有帮助，但也是能让自己成长的经历。</p><p>就HR的角度来说，同专业的两个毕业生，更偏好GPA 3.6 + 若干实习 + 比赛经历而不是GPA 3.9.</p><h3 id="微积分、线性代数"><a href="#微积分、线性代数" class="headerlink" title="微积分、线性代数"></a>微积分、线性代数</h3><p>比较老生常谈的是，高中的学习理解占少数，而练习占多数；譬如数学课堂，很快地介绍内容就开始做题和讲解，但大学的学习理解占多数，而练习只需要达到必要的程度。</p><p>上课务必努力理解跟上进度，自己看书理解定理的来龙去脉是必要的；不管老师的讲课水平如何，在完成每次课堂布置的习题前都要重新理解一遍定理。</p><p>对于微积分和线性代数的练习，有三部分题目是一定要做的：</p><ol><li>书本的例题</li><li>布置需要完成的习题</li><li>考前做往年题（非常重要，如果没有公开的话最好通过别的渠道弄到）</li></ol><p>而其它的，譬如练习课助教出的题，尽量努力理解。买教辅刷题是没有必要的。我当时学的是数学分析，像高中一样买了和做了一些比较难的题集（比如出名的吉米多维奇，事实上，这本教辅书是典型的苏联理工科教材，强调技巧和训练，没有好的组织和思想），事实证明是没有必要的。高等代数亦然。</p><p>这样学，会缺少那种高中刷题堆出来的踏实感，但其实这样的踏实感只是来自于对题目的熟悉和对考试题型的熟悉，其实只有应试的效果。我建议要提高单位学习时间带来的绩点加成，不必要刷题。</p><p>一般来说，具体的技巧都会遗忘（当然在考试前要掌握），因此技巧本身不那么重要（现在比如wolfram alpha/mathematica可以免除手工计算）。</p><p>至于应试，往年题怎么强调都不过分，对应的，如果有选课自由的话要选口碑好的（平衡考量给分情况和讲课手艺）旧老师（新来的你捉摸不透啊）。只要选课选得好，<strong><strong>_</strong></strong>。</p><ul><li><p>对于微积分的学习内容，如下几点比较重要：</p><ol><li><p>实数的来源</p><p>刚开始学这个挺难懂，为什么什么是实数也要定义呢？让我们从戴德金分割和柯西开始说起…</p><ol start="2"><li>求导和求积分意味着什么</li></ol><p>物理上的直观有，位移对时间的二阶导数是加速度，力在时间上积分是动量，在位移上积分是做功；还有变化的磁场产生电场，变化的电场产生磁场都可以用微积分来描述。</p></li><li><p>数列/函数的敛散性</p><ul><li>比如，一堆数列求和会不会求爆了：</li></ul></li></ol></li></ul><pre><code> $\lim\limits_{n\to+\infty}\sum\limits_{i=1}\frac{1}{n}=+\infty$意味着随着n增加，求和求爆了；而$\lim\limits_{n\to+\infty}\sum\limits_{i=1}\frac{1}{n^2}$有上界，不会求爆 - 比如，什么时候可以把一个函数级数展开：    ${\displaystyle e^{x}=\sum _{n=0}^{\infty }{\frac {x^{n}}{n!}}=1+x+{\frac {x^{2}}{2!}}+{\frac {x^{3}}{3!}}+\cdots +{\frac {x^{n}}{n!}}+\cdots \quad \forall x}$，意味着对于每一个$x$，$e^x$都可以被多项式逼近，而![{\displaystyle {\frac {1}{1-x}}=\sum _{n=0}^{\infty }x^{n}=1+x+x^{2}+\cdots +x^{n}+\cdots \quad \forall x:\left|x\right|&lt;1}](https://wikimedia.org/api/rest_v1/media/math/render/svg/41a1a174b53d61dfecaa7a5d5643e5a21437eb0a)意味着只有在$(-1,1)$上才可以这么展开。</code></pre><ul><li><p>对于线性代数，首先要提的是，从空间的角度理解代数非常、非常重要，每一个新的知识点都要去对应上在几何上的意义。然后，对于你来说，线性代数比微积分要重要且有用一些。此外，有以下几点内容比较重要：</p><ol><li><p>线性相关，线性无关</p><p>简单而直观地说，在三维空间里，考虑所有从原点出发的向量，随便取三个向量：</p><p>它们如果在同一个平面上，其中的一个向量$\textbf{x}$能被另外两个向量$\textbf{y},\textbf{z}$表示为$\textbf{x}=t\textbf{y}+u\textbf{z}$，这叫$\textbf{x}$被$\textbf{y}$和$\textbf{z}$线性表出，也意味着$\textbf{x}$其实不独立于$\textbf{y}$和$\textbf{z}$，调换顺序也类似可以用$\textbf{y}$和$\textbf{z}$来表示$\textbf{x}$，或者可以写成，$a\textbf{x}+b\textbf{y}+c\textbf{z} = \textbf{0}$,于是它们线性相关了。</p><p>它们如果不在同一个平面上，那么它们可以张成一个三棱锥，它们就线性不相关，独立于彼此。</p></li><li><p>矩阵的秩</p><p>简单来说就是把矩阵的每一列看成一个向量，最多能找到几个线性无关的向量；它有很多神奇的性质矩阵的秩的内在属性是在定义了向量、线性相关表示这些之后，第一个具有深刻意义的结论。</p></li><li><p>高斯消元法求线性方程组的解</p></li><li><p>矩阵乘法</p><p>我现在天天写一堆矩阵乘法，就很实用。。</p></li><li><p>矩阵的相似和对角化（有点难）</p><p>线性代数的光芒所在，理解了矩阵的相似和对角化，就理解了线性代数；从小学数学，学到的都是平凡的、常识一样自然的结论，但这里不是，从这里开始，构造出来的数学世界占据主导，而对称、同一和美在这精巧的建筑之中展开。</p></li></ol></li></ul><h3 id="文科计算机课"><a href="#文科计算机课" class="headerlink" title="文科计算机课"></a>文科计算机课</h3><p>提纲挈领地说，编程和计算机知识是现在求职市场非常具有竞争力的技术。大部分专业，会Coding在当下就是有竞争力。</p><p>我祝愿你们的老师教Python或者Matlab，而不只是教Office、Adobe的软件使用。</p><p>这里插入一段我关于Office的看法。</p><p>我没有学习过怎么用Word，因为我的学术论文用Latex这样的专业排版软件排版，而政治课、公选课论文一般有模板，Word的存储是二进制存储，因此不方便使用git这样的版本管理软件来管理每一个版本。如果你要用电脑记笔记的话，我的建议是Typora（使用Markdown语法），比如现在这段文本就是用Typora写的。如果你买iPad就另说。</p><p>市面上有很多卖Powerpoint模板的，在大一的时候我还挺好奇地下了一堆，发现大部分不能用。事实上，我目前做过很多报告也听过很多报告，我认为，一个好的Slides模板不需要太多东西，不需要好看的过场和元素，需要的是统一的字体和合规的字体大小颜色，对齐的图片，合理的内容安排。关于Powerpoint模板，我的建议是，自己做一个，带四川大学Logo的。Powerpoint还有一个重要功能是画图，我现在学术论文的模型画图都用Powerpoint，贼省事。</p><p>Excel我从来没用过且不会。据说有用，我之前在朋友圈看到一些HR发的招实习生的帖子有要求Excel的。我自己处理数据是写Python脚本的。</p><p>Adobe系列很值得一学。学Adobe就是一边学技术处理，一边培养审美和设计。对于这种东西我的看法都是先了解能做什么，然后在实践（工程）中不断Google掌握技巧。我也在学，一起进步吧~以后一起剪视频！</p><p>关于Python。虽然木遥老师常常吐槽Python是多么烂的一种工程语言，我个人觉得完全相反。相比C/C++那丑陋的语法和艰巨的学习曲线，Python的语法简直就是赞美诗，而它的学习曲线异常平滑。对于编程的学习：</p><p>先学一遍语法，不要在边界条件上纠结太久；看看别人的例子；然后开始造东西（一边查文档和Google），然后痛苦地Debug，解决后，再看别人怎么造。</p><p>按以上这个过程循环。直到所需要面对的工程比较复杂，那么可以直接从别人的框架上改（但一般不建议这么做）。</p><p>Python能做什么呢？</p><p>它是：</p><ol><li><p>一个功能强大的计算器（加减乘除平方开方求和求矩阵分解）</p></li><li><p>快速处理文件的脚本语言（所谓脚本语言，就是写了就能拿来跑的语言，不像C/C++还需要先编译一遍），比如可以用来批量给文件改名，批量生成文件等等</p></li><li>机器学习的语言（比如给图片分类，AI写诗，AlphaGo，还有我所研究的视频分析，这方面其它语言都已经被干掉了）</li><li>爬虫的语言（所谓爬虫，就是从互联网上抓取数据，比如分析豆瓣的网页，抓取下豆瓣前500的榜单之类的）</li><li>数据分析的语言（和机器学习有些微不同，文科生比较常用，和R语言并列）</li></ol><p>Python有什么特性？</p><p>按照你的审美，我相信这是你接触的语法最好的一门语言。代码很干净，没有每句话后都要写的分号，没有丑陋的大括号。</p><p>总之，我希望你们文科计算机的老师能明智到教Python而不是C/C++。</p><h3 id="政治课"><a href="#政治课" class="headerlink" title="政治课"></a>政治课</h3><p>中国的大学生必修的政治课包括军事理论（有时和军训合并）、思想道德修养与法律基础（思修）、马克思主义基本原理（马原）、毛泽东思想和中国特色社会主义理论体系概论（毛概）。</p><p>如果拿奖学金，政治课分数不能低，期末考前要疯狂背书。争取保研的好处之一是，不需要像考研一样要考政治。要保研的话，需要在大四前修完政治课。</p><p>我个人认为军理和毛概纯粹是浪费时间，而且是精神污染。思修看老师怎么样了，如果很nice的话还是可以一听，比如复旦陈果这样的。马原我也没学，不做评价，应当还可。政治课签到要去，</p><p>另外，申请出国的话政治课成绩稍微不那么重要一些。因为我不保研，我把政治课都留到大四选，因为我只有考试前才学，分数很差，不太好看。</p><p>总体来说，我自己学政治课的方式就是，签到要去，期末考前疯狂背书。这样应该是拿分效率比较高的方式了。。</p><h3 id="通识课"><a href="#通识课" class="headerlink" title="通识课"></a>通识课</h3><p>每门课的给分、讲课方式都不太一样，老师第一节课一般会说。我对通识课的一个看法是，通识课尽量选自己感兴趣的课吧，听说某门通识课给分好而去选就太没意思了。毕竟大学的绩点也只是这四年有用，而有可能在通识课上建立起来的对其它领域的深入的兴趣更有意义。</p><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>其实我大学没怎么专门学英语，基本都是考前抱佛脚，吃老本过活。托福/雅思作用类似，看学校要求，美国学校基本都接受托福。GRE是申请美国研究生需要的考试。没有出国计划可以不考GRE，但是托福/雅思可以去考，相比四六级贵得多（但有用得多，只能说一分钱一分货。。）。</p><p>四六级如果大一能考就都考了吧。准备四六级没必要背专门的单词书，直接去做卷子就可以了。</p><h3 id="学术与就业"><a href="#学术与就业" class="headerlink" title="学术与就业"></a>学术与就业</h3><p>从某个角度来看，本科课程的设置，是未来这个领域的研究人员所需要的课程设置。它不培养程序员，它培养计算机科学家；它不培养作家，它培养文学研究者/评论家。但事实上，大部分计算机科学专业的同学，他们成为了程序员，而大部分中文系的同学，…他们倒也没有成为作家，他们成为中小学老师。</p><p>这其中有一种不对称，可能造成的情况是上某些课的时候，你可能会陷入深深的这玩意儿有啥用的思考；或者是多年后回望当年的课程，遗憾为啥花了那么多时间学这个东西而不是拿来做点别的。但是为了阶段性的目标，又需要这门课要有好看的分数。对于计算机来说这种感觉更强烈一些，因为技术的更新换代很快；我至今很疑惑我初中为啥要在Pascal语言上搞算法竞赛。对于别的课程，未必要那么功利，但也要思考哪些课要更偏重一些。一个专业里的课程，可能某一门很重要，几乎成为就业的核心竞争力，比如计算机的算法课，而有的就只是为了学术而存在，比如新闻系的中国新闻史这种。同样需要刷高成绩的情况下，需要有所侧重。当然年级高了之后自己也会有很清楚的判断，但是大一刚进来，没有必要对着每一门课都花太多时间。</p><p>另外值得一提的是，现在考研的人数增加，而研究生名额并不增多。清北的硕士研究生名额在减少。前者的原因之一是很多人没有做本科毕业就工作的准备，希望在学校多呆几年，我认为其实抱着这种想法还不如早点出来混，之二是向往一个更好的学校，更好的学校对就业是有加分的，尤其比如从双非本到985硕，但如果已经是985的话可以考虑北大硕；至于后者，高校希望招收更多的博士生，博士生有稳定的五年学术成果产出，而硕士生可能刚培养得能发表论文就要毕业了。</p><p>从外界看，研究生是一个更高的学历，意味着上过更多的课，有更多的知识和能力；但从高校内部看，本科生是上课、学习知识的阶段，而研究生是进入学术、发表论文的阶段。理工科的研究生上课不多，主要是在实验室做实验并发表论文。文科的研究生可能略有不同。国内硕士分学硕/专硕，前者较为主流，三年时间。国外分学术型/授课型。来自很多人的建议是，如果没打算留在学术界，没必要读研究生，进入业界就可以了，可以多积累三年的工作经验；另外一个Cliche是，有很多工作是只有Ph.D.才能做的，普通的本科生/硕士生做不了（当然我觉得这更多是理工科的情况）；又或者比如同样有升职机会，会优先考虑学历更高的。总之，这一方面各种考虑都有，我个人觉得你可以试试保研来北大。</p><p>对于我自己来说，我确定自己没有学术热情，我目前的计划就是去工业界做工程师。但我看清这一点比较晚，只是随着大流追求优秀，因此我的背景比较偏学术（图灵班、托福GRE、实验室经历、暑期科研而不是算法竞赛、项目、公司实习），比较适合留学申请，而不太适合国内直接工作。所以还是打算来美国念Master，期间实习，之后工作。据说美帝CS Master的主要价值是来美帝实习和工作的机会，而不是教育本身。</p><h3 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h3><p>一个专业的核心竞争力，并不是某一门课所能训练的。一个真正的中文系的学生在毕业后的语言文字能力就是比别的专业的强，而一个科班出生的计算机系学生的工程能力就是比野生程序员好。这并不是说，上完了某一门古代汉语，或者学习了某一门Java课程之后，自己的水平就一定会提高。这些更多是在实践中练习出来的。</p><p>与高中面向考试的学习非常不同的一点是，大学有很多参与Project提升自我的机会。比如课程的大作业，商赛，美赛等等。不同专业的也不一样，比如计算机有黑客马拉松、ACM算法设计竞赛等等。我比较后悔的一点就是没有参与更多这样的Project，当时的想法是觉得这些履历没有用，不能打扰到学术进程。现在想想就是太Naive了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写给妹妹&lt;/p&gt;
&lt;h2 id=&quot;学习篇&quot;&gt;&lt;a href=&quot;#学习篇&quot; class=&quot;headerlink&quot; title=&quot;学习篇&quot;&gt;&lt;/a&gt;学习篇&lt;/h2&gt;&lt;p&gt;我把本科看作职业生涯的起点，并认为一段成功的职业生涯的关键是放松的心态。没有什么路线是非遵守不可的，也不是非
      
    
    </summary>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>SVD实现-穹妹的奇异值分解</title>
    <link href="http://yoursite.com/2018/08/14/SVD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/14/SVD实现/</id>
    <published>2018-08-15T01:33:00.000Z</published>
    <updated>2018-08-14T13:38:26.622Z</updated>
    
    <content type="html"><![CDATA[<p>The first image is the input image, and next 4 is processed image, corresponding to using 1,2,4 and 16 singular values.</p><p>The 16 singular value is much more better than 1,2,4 cases and show most of features of the initial image.</p><p>The code is given in image_reconstruction.py.</p><a id="more"></a><p>Code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">in_image = cv2.imread(<span class="string">"input.jpeg"</span>).astype(np.float64)</span><br><span class="line">n, d = in_image.shape[:<span class="number">2</span>]</span><br><span class="line">rk_pool = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">16</span>]</span><br><span class="line"><span class="keyword">for</span> rk <span class="keyword">in</span> rk_pool:</span><br><span class="line">    b, g, r = cv2.split(in_image)</span><br><span class="line">    image_pool = [b,g,r]</span><br><span class="line">    out_image = np.zeros((n, d, <span class="number">3</span>))</span><br><span class="line">    frob_percent = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> channel <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        u, s, vh = np.linalg.svd(image_pool[channel], full_matrices=<span class="keyword">False</span>)</span><br><span class="line">        init_frob = np.sqrt(np.sum(s**<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(rk,d):</span><br><span class="line">            s[i] = <span class="number">0.0</span></span><br><span class="line">        processed_frob = np.sqrt(np.sum(s**<span class="number">2</span>))</span><br><span class="line">        frob_percent = frob_percent + processed_frob / init_frob</span><br><span class="line">        s = np.diag(s)</span><br><span class="line">        out = np.matmul(u,np.matmul(s,vh))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(d):</span><br><span class="line">                <span class="keyword">if</span> out[row,col] &lt; <span class="number">255.0</span> <span class="keyword">and</span> out[row, col] &gt;=<span class="number">0.0</span>:</span><br><span class="line">                    out_image[row, col, channel] = out[row, col]</span><br><span class="line">                <span class="keyword">elif</span> out[row, col] &gt;=<span class="number">255.0</span>:</span><br><span class="line">                    out_image[row, col, channel] = <span class="number">255.0</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    out_image[row, col, channel] = <span class="number">0.0</span></span><br><span class="line">    cv2.imwrite(<span class="string">"output_rank_"</span> + str(rk) + <span class="string">".jpg"</span>, out_image.astype(np.uint8))</span><br><span class="line">    frob_percent /= <span class="number">3.0</span></span><br><span class="line">    print(<span class="string">"Using %d singular values, %.1lf%% of the Frobenius norm."</span> % (rk, frob_percent * <span class="number">100</span>))</span><br></pre></td></tr></table></figure></p><ol start="2"><li>Running the code and the Frobenius norm captured in each case is 97.15, 98.0%, 98.9%, 99.7%, corresonding to using 1,2,4 and 16 singular values.</li></ol><p><img src="/images/input.jpeg" alt="Input"><br><img src="/images/output_rank_1.jpg" alt=""><br><img src="/images/output_rank_2.jpg" alt=""><br><img src="/images/output_rank_4.jpg" alt=""><br><img src="/images/output_rank_16.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The first image is the input image, and next 4 is processed image, corresponding to using 1,2,4 and 16 singular values.&lt;/p&gt;
&lt;p&gt;The 16 singular value is much more better than 1,2,4 cases and show most of features of the initial image.&lt;/p&gt;
&lt;p&gt;The code is given in image_reconstruction.py.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Trie树, 后缀数组模板</title>
    <link href="http://yoursite.com/2018/08/14/Trie%E6%A0%91-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2018/08/14/Trie树-后缀数组模板/</id>
    <published>2018-08-14T23:52:40.000Z</published>
    <updated>2018-08-14T13:32:09.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALPHABET_SIZE 26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">trie_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> count;   <span class="comment">// 记录该节点代表的单词的个数</span></span><br><span class="line">    trie_node *children[ALPHABET_SIZE]; <span class="comment">// 各个子节点 </span></span><br><span class="line">&#125;*trie;</span><br><span class="line"></span><br><span class="line"><span class="function">trie_node* <span class="title">create_trie_node</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* pNode = <span class="keyword">new</span> trie_node();</span><br><span class="line">    pNode-&gt;count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ALPHABET_SIZE; ++i)</span><br><span class="line">        pNode-&gt;children[i] = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> pNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trie_insert</span><span class="params">(trie root, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* node = root;</span><br><span class="line">    <span class="keyword">char</span>* p = key;</span><br><span class="line">    <span class="keyword">while</span>(*p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;children[*p-<span class="string">'a'</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            node-&gt;children[*p-<span class="string">'a'</span>] = create_trie_node();</span><br><span class="line">        &#125;</span><br><span class="line">        node = node-&gt;children[*p-<span class="string">'a'</span>];</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询：不存在返回0，存在返回出现的次数</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trie_search</span><span class="params">(trie root, <span class="keyword">char</span>* key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    trie_node* node = root;</span><br><span class="line">    <span class="keyword">char</span>* p = key;</span><br><span class="line">    <span class="keyword">while</span>(*p &amp;&amp; node!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node = node-&gt;children[*p-<span class="string">'a'</span>];</span><br><span class="line">        ++p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> node-&gt;count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 关键字集合</span></span><br><span class="line">    <span class="keyword">char</span> keys[][<span class="number">8</span>] = &#123;<span class="string">"the"</span>, <span class="string">"a"</span>, <span class="string">"there"</span>, <span class="string">"answer"</span>, <span class="string">"any"</span>, <span class="string">"by"</span>, <span class="string">"bye"</span>, <span class="string">"their"</span>&#125;;</span><br><span class="line">    trie root = create_trie_node();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建trie树</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        trie_insert(root, keys[i]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检索字符串</span></span><br><span class="line">    <span class="keyword">char</span> s[][<span class="number">32</span>] = &#123;<span class="string">"Present in trie"</span>, <span class="string">"Not present in trie"</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"the"</span>, trie_search(root, <span class="string">"the"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"these"</span>, trie_search(root, <span class="string">"these"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"their"</span>, trie_search(root, <span class="string">"their"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s --- %s\n"</span>, <span class="string">"thaw"</span>, trie_search(root, <span class="string">"thaw"</span>)&gt;<span class="number">0</span>?s[<span class="number">0</span>]:s[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">8</span>, M = <span class="number">1e6</span> + <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], K, ans, q[N];</span><br><span class="line"><span class="keyword">int</span> cnt[M], t1[N], t2[N], sa[N], ht[N], rk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) m = max(m, s[i]), cnt[t1[i] = s[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sa[cnt[t1[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; i++) t2[++p] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (sa[i] &gt; k) t2[++p] = sa[i] - k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) cnt[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[t1[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) sa[cnt[t1[t2[i]]]--] = t2[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) swap(t1[i], t2[i]);</span><br><span class="line">p = <span class="number">0</span>; t1[sa[<span class="number">1</span>]] = ++p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">t1[sa[i]] = (t2[sa[i]] == t2[sa[i - <span class="number">1</span>]] &amp;&amp; </span><br><span class="line">t2[sa[i] + k] == t2[sa[i - <span class="number">1</span>] + k]) ? p : ++p;</span><br><span class="line">m = p; <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, h = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (rk[i] == <span class="number">1</span>) h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (h) h--;</span><br><span class="line"><span class="keyword">while</span> (i + h &lt;= n &amp;&amp; sa[rk[i] - <span class="number">1</span>] + h &lt;= n </span><br><span class="line">&amp;&amp; s[i + h] == s[sa[rk[i] - <span class="number">1</span>] + h]) h++;</span><br><span class="line">&#125;</span><br><span class="line">ht[rk[i]] = h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n - K + <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (l &gt; r || q[r] &lt; i + K - <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = q[r] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; ht[p] &lt; ht[q[r]]) r--;</span><br><span class="line">q[++r] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt;= r &amp;&amp; q[l] &lt; i) l++;</span><br><span class="line">ans = max(ans, ht[q[l]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">freopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">build_sa(n, a);</span><br><span class="line">solve();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">fclose(<span class="built_in">stdin</span>); fclose(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Trie树&quot;&gt;&lt;a href=&quot;#Trie树&quot; class=&quot;headerlink&quot; title=&quot;Trie树&quot;&gt;&lt;/a&gt;Trie树&lt;/h1&gt;
    
    </summary>
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Prim, Kruskal, Dijkstra, Hungarian Algorithm Templates</title>
    <link href="http://yoursite.com/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/"/>
    <id>http://yoursite.com/2018/08/14/Prim-Kruskal-Dijkstra-Hungarian-Algorithm-Templates/</id>
    <published>2018-08-14T23:46:44.000Z</published>
    <updated>2018-08-14T13:32:05.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><ul><li>时间复杂度 O(V^2)<a id="more"></a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> graph[][MAX], <span class="keyword">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> lowcost[MAX];  </span><br><span class="line">    <span class="keyword">int</span> mst[MAX];  </span><br><span class="line">    <span class="keyword">int</span> i, j, min, minid, sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        lowcost[i] = graph[<span class="number">1</span>][i];  </span><br><span class="line">        mst[i] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    mst[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        min = MAXCOST;  </span><br><span class="line">        minid = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] &lt; min &amp;&amp; lowcost[j] != <span class="number">0</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                min = lowcost[j];  </span><br><span class="line">                minid = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"V"</span> &lt;&lt; mst[minid] &lt;&lt; <span class="string">"-V"</span> &lt;&lt; minid &lt;&lt; <span class="string">"="</span> &lt;&lt; min &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        sum += min;  </span><br><span class="line">        lowcost[minid] = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= n; j++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (graph[minid][j] &lt; lowcost[j])  </span><br><span class="line">            &#123;  </span><br><span class="line">                lowcost[j] = graph[minid][j];  </span><br><span class="line">                mst[j] = minid;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><ul><li>时间复杂度 O(ElogE)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> nEdge = <span class="number">0</span>, res = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//将边按照权值从小到大排序  </span></span><br><span class="line">    qsort(a, n, <span class="keyword">sizeof</span>(a[<span class="number">0</span>]), cmp);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; nEdge != m - <span class="number">1</span>; i++)&#123;  </span><br><span class="line">        <span class="comment">//判断当前这条边的两个端点是否属于同一棵树  </span></span><br><span class="line">        <span class="keyword">if</span>(find(a[i].a) != find(a[i].b))&#123;  </span><br><span class="line">            unite(a[i].a, a[i].b);  </span><br><span class="line">            res += a[i].price;  </span><br><span class="line">            nEdge++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//如果加入边的数量小于m - 1,则表明该无向图不连通,等价于不存在最小生成树  </span></span><br><span class="line">    <span class="keyword">if</span>(nEdge &lt; m<span class="number">-1</span>) res = <span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v0)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  　　<span class="keyword">bool</span> S[MAXNUM];                                  <span class="comment">// 判断是否已存入该点到S集合中</span></span><br><span class="line">      <span class="keyword">int</span> n=MAXNUM;</span><br><span class="line">  　　<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">      　　dist[i] = A[v0][i];</span><br><span class="line">      　　S[i] = <span class="literal">false</span>;                                <span class="comment">// 初始都未用过该点</span></span><br><span class="line">      　　<span class="keyword">if</span>(dist[i] == MAXINT)    </span><br><span class="line">            　　prev[i] = <span class="number">-1</span>;</span><br><span class="line"> 　　     <span class="keyword">else</span> </span><br><span class="line">            　　prev[i] = v0;</span><br><span class="line">   　　&#125;</span><br><span class="line">   　 dist[v0] = <span class="number">0</span>;</span><br><span class="line">   　 S[v0] = <span class="literal">true</span>; 　　</span><br><span class="line"> 　　 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line"> 　　 &#123;</span><br><span class="line">       　　<span class="keyword">int</span> mindist = MAXINT;</span><br><span class="line">       　　<span class="keyword">int</span> u = v0; 　　                            <span class="comment">// 找出当前未使用的点j的dist[j]最小值</span></span><br><span class="line">      　　 <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j)</span><br><span class="line">      　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; dist[j]&lt;mindist)</span><br><span class="line">      　　    &#123;</span><br><span class="line">         　　       u = j;                             <span class="comment">// u保存当前邻接点中距离最小的点的号码 </span></span><br><span class="line">         　 　      mindist = dist[j];</span><br><span class="line">       　　   &#125;</span><br><span class="line">       　　S[u] = <span class="literal">true</span>; </span><br><span class="line">       　　<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">       　　    <span class="keyword">if</span>((!S[j]) &amp;&amp; A[u][j]&lt;MAXINT)</span><br><span class="line">       　　    &#123;</span><br><span class="line">           　    　<span class="keyword">if</span>(dist[u] + A[u][j] &lt; dist[j])     <span class="comment">//在通过新加入的u点路径找到离v0点更短的路径  </span></span><br><span class="line">           　    　&#123;</span><br><span class="line">                   　　dist[j] = dist[u] + A[u][j];    <span class="comment">//更新dist </span></span><br><span class="line">                   　　prev[j] = u;                    <span class="comment">//记录前驱顶点 </span></span><br><span class="line">            　　    &#125;</span><br><span class="line">        　    　&#125;</span><br><span class="line">   　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化v[0]到v[i]的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        dis[i] = w[<span class="number">0</span>][i];                                       </span><br><span class="line">    vis[<span class="number">0</span>]=<span class="number">1</span>;<span class="comment">//标记v[0]点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//查找最近点</span></span><br><span class="line">        <span class="keyword">int</span> min = INF,k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[w] &amp;&amp; dis[j] &lt; min)</span><br><span class="line">                min = dis[w],k = j;</span><br><span class="line">        vis[k] = <span class="number">1</span>;<span class="comment">//标记查找到的最近点</span></span><br><span class="line">        <span class="comment">//判断是直接v[0]连接v[j]短，还是经过v[k]连接v[j]更短</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[j] &amp;&amp; min+w[k][j] &lt; dis[j])</span><br><span class="line">                d[j] = min+w[k][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF  0x7fffffff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> wt;</span><br><span class="line">edge(<span class="keyword">int</span> to_,<span class="keyword">int</span> wt_):to(to_),wt(wt_)&#123;&#125;;</span><br><span class="line"><span class="comment">/*bool operator&lt; (edge&amp; b)&#123;</span></span><br><span class="line"><span class="comment">return val&lt;b.val;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">edge()&#123;&#125;;</span></span><br><span class="line"><span class="comment">edge(int from_,int to_,int val_):from(from_),to(to_),val(val_)&#123;&#125;;*/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node&amp; b)&#123;</span><br><span class="line"><span class="keyword">return</span> val&lt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">node(<span class="keyword">int</span> to_,<span class="keyword">int</span> val_):to(to_),val(val_)&#123;&#125;;</span><br><span class="line">node()&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; adj[MAXN];</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;edge&gt;::iterator it;</span><br><span class="line">priority_queue&lt;node, <span class="built_in">vector</span>&lt;node&gt;,less&lt;node&gt; &gt; heap;</span><br><span class="line"><span class="keyword">int</span> vis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> prev[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> wt)</span></span>&#123;</span><br><span class="line">adj[from].push_back(edge(to,wt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dis[i]=INF;</span><br><span class="line">vis[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">dis[from]=<span class="number">0</span>;</span><br><span class="line">heap.push(node(from,<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">node now;</span><br><span class="line"><span class="keyword">while</span>(vis[(now=heap.top()).to])</span><br><span class="line">heap.pop();</span><br><span class="line">heap.pop();</span><br><span class="line">vis[now.to]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(it i=adj[now.to].begin();i!=adj[now.to].end();++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[now.to]+i-&gt;wt&lt;dis[i-&gt;to])&#123;</span><br><span class="line">dis[i-&gt;to]=dis[now.to]+i-&gt;wt;</span><br><span class="line">heap.push(node(i-&gt;to,dis[i-&gt;to]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> from,n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> from,to,wt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;from&gt;&gt;to&gt;&gt;wt;</span><br><span class="line">add(from,to,wt);</span><br><span class="line">&#125;</span><br><span class="line">dijkstra(from,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Hungarian"><a href="#Hungarian" class="headerlink" title="Hungarian"></a>Hungarian</h1><p><code>`</code>cpp<br>//poj_2446<br>/<em>==================================================</em>\<br>| 二分图匹配（匈牙利算法DFS 实现）<br>| INIT: g[][]邻接矩阵;<br>| 优点：实现简洁容易理解，适用于稠密图，DFS找增广路快。<br>| 找一条增广路的复杂度为O（E），最多找V条增广路，故时间复杂度为O（VE）<br>==================================================*/  </p><p>#include&lt;stdio.h&gt;  </p><p>#include&lt;memory.h&gt;  </p><p>#define MAX 1089 //33*33<br>bool g[MAX][MAX]; //邻接矩阵，true代表有边相连<br>bool flag,visit[MAX];    //记录V2中的某个点是否被搜索过<br>int match[MAX];   //记录与V2中的点匹配的点的编号<br>int cnt;   //二分图中左边、右边集合中顶点的数目<br>bool hole[MAX][MAX];<br>int id[MAX][MAX];  </p><p>// 匈牙利算法<br>bool dfs(int u)<br>{<br>    for (int i = 1; i &lt;= cnt; ++i)<br>    {<br>        if (g[u][i] &amp;&amp; !visit[i])   //如果节点i与u相邻并且未被查找过<br>        {<br>            visit[i] = true;   //标记i为已查找过<br>            if (match[i] == -1 || dfs(match[i]))   //如果i未在前一个匹配M中，或者i在匹配M中，但是从与i相邻的节点出发可以有增广路径<br>            {<br>                match[i] = u;  //记录查找成功记录，更新匹配M（即“取反”）<br>                return true;   //返回查找成功<br>            }<br>        }<br>    }<br>    return false;<br>}<br>int MaxMatch()<br>{<br>    int i,sum=0;<br>    memset(match,-1,sizeof(match));<br>    for(i = 1 ; i &lt;= cnt ; ++i)<br>    {<br>        memset(visit,false,sizeof(visit));   //清空上次搜索时的标记<br>        if( dfs(i) )    //从节点i尝试扩展<br>        {<br>            sum++;<br>        }<br>    }<br>    return sum;<br>}  </p><p>int main(void)<br>{<br>    int i,j,k,m,n,ans,y,x;<br>    while (scanf(“%d %d %d”,&amp;m,&amp;n,&amp;k)!=EOF)<br>    {<br>          memset(g,false,sizeof(g));<br>          memset(hole,false,sizeof(hole));<br>          for (i = 1; i &lt;= k; ++i)<br>          {<br>              scanf(“%d %d”,&amp;y,&amp;x);<br>              hole[x][y] = true;<br>          }<br>          if((m*n-k)&amp;1)   //奇偶剪枝<br>          {<br>              puts(“NO”);<br>              continue;<br>          }<br>          cnt = 0;  </p><pre><code>      for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)   //对没有涂黑的点进行标号                {                    id[i][j] = ++cnt;                }            }        }        for (i = 1; i &lt;= m; ++i)        {            for (j = 1; j &lt;= n; ++j)            {                if(hole[i][j] == false)                {                    if(i-1&gt;0 &amp;&amp; hole[i-1][j] == false)   //建图。。要注意边界问题                        g[ id[i][j] ][ id[i-1][j] ] = true;                    if(i+1&lt;=m &amp;&amp; hole[i+1][j] == false)                        g[ id[i][j] ][ id[i+1][j] ] = true;                    if(j-1&gt;0 &amp;&amp; hole[i][j-1] == false)                        g[ id[i][j] ][ id[i][j-1] ] = true;                    if(j+1&lt;=n &amp;&amp; hole[i][j+1] == false)                        g[ id[i][j] ][ id[i][j+1] ] = true;                }            }        }        ans = MaxMatch();        if (ans == cnt)            puts(&quot;YES&quot;);        else            puts(&quot;NO&quot;);  }  return 0;  </code></pre><p>}  </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Prim&quot;&gt;&lt;a href=&quot;#Prim&quot; class=&quot;headerlink&quot; title=&quot;Prim&quot;&gt;&lt;/a&gt;Prim&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度 O(V^2)
    
    </summary>
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>夜思</title>
    <link href="http://yoursite.com/2018/08/14/%E5%A4%9C%E6%80%9D/"/>
    <id>http://yoursite.com/2018/08/14/夜思/</id>
    <published>2018-08-14T23:39:28.000Z</published>
    <updated>2019-01-11T16:30:18.850Z</updated>
    
    <content type="html"><![CDATA[<p>忽然间，我失去多少落日<br>那些高尚的人们是否知道，<br>他们正盗用生存的名义，<br>布施致命的罗网  </p><p>我曾阅读每束光线里的诗行，<br>我曾在每个夜晚远行到梦的疆界，<br>无论转过多少疯狂的街角，<br>都能轻而易举地蔑视死亡。<br>我拥有乐观的贫穷和狂热的爱意，<br>直到出卖了年华，敌视着远方。<br>土壤，土壤，<br>我们生活的地方，<br>我们荒诞的战场！  </p><p>如今我已两手空空，<br>每当夜幕降临我虚构睡意<br>黑暗沉默不语，在每一盏夜灯下<br>收发属于每一个人的种子<br>夜风酝酿了意志，吹入草场<br>也许有一天<br>我将目击千万次的黎明的光</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;忽然间，我失去多少落日&lt;br&gt;那些高尚的人们是否知道，&lt;br&gt;他们正盗用生存的名义，&lt;br&gt;布施致命的罗网  &lt;/p&gt;
&lt;p&gt;我曾阅读每束光线里的诗行，&lt;br&gt;我曾在每个夜晚远行到梦的疆界，&lt;br&gt;无论转过多少疯狂的街角，&lt;br&gt;都能轻而易举地蔑视死亡。&lt;br&gt;我拥有乐观的
      
    
    </summary>
    
    
      <category term="poem" scheme="http://yoursite.com/tags/poem/"/>
    
  </entry>
  
  <entry>
    <title>华丽的诗</title>
    <link href="http://yoursite.com/2018/08/14/%E5%8D%8E%E4%B8%BD%E7%9A%84%E8%AF%97/"/>
    <id>http://yoursite.com/2018/08/14/华丽的诗/</id>
    <published>2018-08-14T23:35:20.000Z</published>
    <updated>2019-01-11T16:30:18.902Z</updated>
    
    <content type="html"><![CDATA[<p>树，在消失的岛屿上<br>与另一个素未谋面的同类重逢<br>信天翁冲入没有鱼儿的水底<br>闪电，言和于温柔的夜色<br>像所有被收回的露珠与眼神<br>广袤的水面将自己忘记  </p><p>梦境学会敲打<br>一再惊醒故事结局的亡魂<br>彼时，街道瘦落，长夜<br>听到虫鸣寂寂<br>每一片叶的脉络<br>开始被大理石碑轻柔地拭去  </p><p>但是，<br>正因着忧伤是复活的种子<br>我听见飞鸟衔来过去的石头<br>我听见松茸，在每一寸记忆<br>土壤里展开自己<br>你的灵魂是风<br>从一无所有里渐渐扬起<br>如同没有一次夜幕<br>能够阻挡太阳的旅行  </p><p>看吧<br>狂野的森林<br>正在岁月里拔地而起<br>我把世上所有的海浪<br>卷成蓝色的玫瑰<br>只为祝福你的生命</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;树，在消失的岛屿上&lt;br&gt;与另一个素未谋面的同类重逢&lt;br&gt;信天翁冲入没有鱼儿的水底&lt;br&gt;闪电，言和于温柔的夜色&lt;br&gt;像所有被收回的露珠与眼神&lt;br&gt;广袤的水面将自己忘记  &lt;/p&gt;
&lt;p&gt;梦境学会敲打&lt;br&gt;一再惊醒故事结局的亡魂&lt;br&gt;彼时，街道瘦落，长夜&lt;br&gt;听
      
    
    </summary>
    
    
      <category term="poem" scheme="http://yoursite.com/tags/poem/"/>
    
  </entry>
  
  <entry>
    <title>城门开</title>
    <link href="http://yoursite.com/2018/08/14/%E5%9F%8E%E9%97%A8%E5%BC%80/"/>
    <id>http://yoursite.com/2018/08/14/城门开/</id>
    <published>2018-08-14T23:27:05.000Z</published>
    <updated>2019-01-11T16:30:18.894Z</updated>
    
    <content type="html"><![CDATA[<p>在彩色的冰面上裸足祈祷<br>风中，旧衣裳选择沉默<br>苍老的手松开：<br>诀别、生计、太阳</p><p>无从抵御的针尖下，<br>暮色迟迟，轰然作响<br>死去的人不在彼岸<br>他们化身万物 流回山谷海洋  </p><p>大风曾带走梦的潮声<br>往四面八方的街道飘荡<br>年岁灰黄，不停的脚步<br>走着沉睡的人们<br>肮脏的城市上空<br>白雪茫茫</p><p>合眼<br>最后的和弦锤落在地<br>往事四溅<br>飞驰而过胶片般的人<br>所有的大海为你闭合<br>而喧嚣中，<br>你看到静静升起的太阳</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在彩色的冰面上裸足祈祷&lt;br&gt;风中，旧衣裳选择沉默&lt;br&gt;苍老的手松开：&lt;br&gt;诀别、生计、太阳&lt;/p&gt;
&lt;p&gt;无从抵御的针尖下，&lt;br&gt;暮色迟迟，轰然作响&lt;br&gt;死去的人不在彼岸&lt;br&gt;他们化身万物 流回山谷海洋  &lt;/p&gt;
&lt;p&gt;大风曾带走梦的潮声&lt;br&gt;往四面八方的街
      
    
    </summary>
    
    
      <category term="poem" scheme="http://yoursite.com/tags/poem/"/>
    
  </entry>
  
</feed>
